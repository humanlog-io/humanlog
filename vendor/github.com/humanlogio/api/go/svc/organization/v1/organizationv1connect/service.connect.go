// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/organization/v1/service.proto

package organizationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/organization/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "svc.organization.v1.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateAccountProcedure is the fully-qualified name of the
	// OrganizationService's CreateAccount RPC.
	OrganizationServiceCreateAccountProcedure = "/svc.organization.v1.OrganizationService/CreateAccount"
	// OrganizationServiceListAccountProcedure is the fully-qualified name of the OrganizationService's
	// ListAccount RPC.
	OrganizationServiceListAccountProcedure = "/svc.organization.v1.OrganizationService/ListAccount"
	// OrganizationServiceListUserProcedure is the fully-qualified name of the OrganizationService's
	// ListUser RPC.
	OrganizationServiceListUserProcedure = "/svc.organization.v1.OrganizationService/ListUser"
	// OrganizationServiceInviteUserProcedure is the fully-qualified name of the OrganizationService's
	// InviteUser RPC.
	OrganizationServiceInviteUserProcedure = "/svc.organization.v1.OrganizationService/InviteUser"
	// OrganizationServiceRevokeUserProcedure is the fully-qualified name of the OrganizationService's
	// RevokeUser RPC.
	OrganizationServiceRevokeUserProcedure = "/svc.organization.v1.OrganizationService/RevokeUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	organizationServiceServiceDescriptor             = v1.File_svc_organization_v1_service_proto.Services().ByName("OrganizationService")
	organizationServiceCreateAccountMethodDescriptor = organizationServiceServiceDescriptor.Methods().ByName("CreateAccount")
	organizationServiceListAccountMethodDescriptor   = organizationServiceServiceDescriptor.Methods().ByName("ListAccount")
	organizationServiceListUserMethodDescriptor      = organizationServiceServiceDescriptor.Methods().ByName("ListUser")
	organizationServiceInviteUserMethodDescriptor    = organizationServiceServiceDescriptor.Methods().ByName("InviteUser")
	organizationServiceRevokeUserMethodDescriptor    = organizationServiceServiceDescriptor.Methods().ByName("RevokeUser")
)

// OrganizationServiceClient is a client for the svc.organization.v1.OrganizationService service.
type OrganizationServiceClient interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error)
	ListUser(context.Context, *connect.Request[v1.ListUserRequest]) (*connect.Response[v1.ListUserResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	RevokeUser(context.Context, *connect.Request[v1.RevokeUserRequest]) (*connect.Response[v1.RevokeUserResponse], error)
}

// NewOrganizationServiceClient constructs a client for the svc.organization.v1.OrganizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationServiceClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+OrganizationServiceCreateAccountProcedure,
			connect.WithSchema(organizationServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAccount: connect.NewClient[v1.ListAccountRequest, v1.ListAccountResponse](
			httpClient,
			baseURL+OrganizationServiceListAccountProcedure,
			connect.WithSchema(organizationServiceListAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUser: connect.NewClient[v1.ListUserRequest, v1.ListUserResponse](
			httpClient,
			baseURL+OrganizationServiceListUserProcedure,
			connect.WithSchema(organizationServiceListUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+OrganizationServiceInviteUserProcedure,
			connect.WithSchema(organizationServiceInviteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revokeUser: connect.NewClient[v1.RevokeUserRequest, v1.RevokeUserResponse](
			httpClient,
			baseURL+OrganizationServiceRevokeUserProcedure,
			connect.WithSchema(organizationServiceRevokeUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createAccount *connect.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	listAccount   *connect.Client[v1.ListAccountRequest, v1.ListAccountResponse]
	listUser      *connect.Client[v1.ListUserRequest, v1.ListUserResponse]
	inviteUser    *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	revokeUser    *connect.Client[v1.RevokeUserRequest, v1.RevokeUserResponse]
}

// CreateAccount calls svc.organization.v1.OrganizationService.CreateAccount.
func (c *organizationServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// ListAccount calls svc.organization.v1.OrganizationService.ListAccount.
func (c *organizationServiceClient) ListAccount(ctx context.Context, req *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error) {
	return c.listAccount.CallUnary(ctx, req)
}

// ListUser calls svc.organization.v1.OrganizationService.ListUser.
func (c *organizationServiceClient) ListUser(ctx context.Context, req *connect.Request[v1.ListUserRequest]) (*connect.Response[v1.ListUserResponse], error) {
	return c.listUser.CallUnary(ctx, req)
}

// InviteUser calls svc.organization.v1.OrganizationService.InviteUser.
func (c *organizationServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// RevokeUser calls svc.organization.v1.OrganizationService.RevokeUser.
func (c *organizationServiceClient) RevokeUser(ctx context.Context, req *connect.Request[v1.RevokeUserRequest]) (*connect.Response[v1.RevokeUserResponse], error) {
	return c.revokeUser.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the svc.organization.v1.OrganizationService
// service.
type OrganizationServiceHandler interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error)
	ListUser(context.Context, *connect.Request[v1.ListUserRequest]) (*connect.Response[v1.ListUserResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	RevokeUser(context.Context, *connect.Request[v1.RevokeUserRequest]) (*connect.Response[v1.RevokeUserResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceCreateAccountHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(organizationServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListAccountHandler := connect.NewUnaryHandler(
		OrganizationServiceListAccountProcedure,
		svc.ListAccount,
		connect.WithSchema(organizationServiceListAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListUserHandler := connect.NewUnaryHandler(
		OrganizationServiceListUserProcedure,
		svc.ListUser,
		connect.WithSchema(organizationServiceListUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceInviteUserHandler := connect.NewUnaryHandler(
		OrganizationServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(organizationServiceInviteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceRevokeUserHandler := connect.NewUnaryHandler(
		OrganizationServiceRevokeUserProcedure,
		svc.RevokeUser,
		connect.WithSchema(organizationServiceRevokeUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.organization.v1.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateAccountProcedure:
			organizationServiceCreateAccountHandler.ServeHTTP(w, r)
		case OrganizationServiceListAccountProcedure:
			organizationServiceListAccountHandler.ServeHTTP(w, r)
		case OrganizationServiceListUserProcedure:
			organizationServiceListUserHandler.ServeHTTP(w, r)
		case OrganizationServiceInviteUserProcedure:
			organizationServiceInviteUserHandler.ServeHTTP(w, r)
		case OrganizationServiceRevokeUserProcedure:
			organizationServiceRevokeUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.organization.v1.OrganizationService.CreateAccount is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.organization.v1.OrganizationService.ListAccount is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListUser(context.Context, *connect.Request[v1.ListUserRequest]) (*connect.Response[v1.ListUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.organization.v1.OrganizationService.ListUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.organization.v1.OrganizationService.InviteUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) RevokeUser(context.Context, *connect.Request[v1.RevokeUserRequest]) (*connect.Response[v1.RevokeUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.organization.v1.OrganizationService.RevokeUser is not implemented"))
}
