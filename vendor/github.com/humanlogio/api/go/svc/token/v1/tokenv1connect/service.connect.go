// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/token/v1/service.proto

package tokenv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/token/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "svc.token.v1.TokenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenServiceGenerateAccountTokenProcedure is the fully-qualified name of the TokenService's
	// GenerateAccountToken RPC.
	TokenServiceGenerateAccountTokenProcedure = "/svc.token.v1.TokenService/GenerateAccountToken"
	// TokenServiceRevokeAccountTokenProcedure is the fully-qualified name of the TokenService's
	// RevokeAccountToken RPC.
	TokenServiceRevokeAccountTokenProcedure = "/svc.token.v1.TokenService/RevokeAccountToken"
	// TokenServiceGetAccountTokenProcedure is the fully-qualified name of the TokenService's
	// GetAccountToken RPC.
	TokenServiceGetAccountTokenProcedure = "/svc.token.v1.TokenService/GetAccountToken"
	// TokenServiceListAccountTokenProcedure is the fully-qualified name of the TokenService's
	// ListAccountToken RPC.
	TokenServiceListAccountTokenProcedure = "/svc.token.v1.TokenService/ListAccountToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tokenServiceServiceDescriptor                    = v1.File_svc_token_v1_service_proto.Services().ByName("TokenService")
	tokenServiceGenerateAccountTokenMethodDescriptor = tokenServiceServiceDescriptor.Methods().ByName("GenerateAccountToken")
	tokenServiceRevokeAccountTokenMethodDescriptor   = tokenServiceServiceDescriptor.Methods().ByName("RevokeAccountToken")
	tokenServiceGetAccountTokenMethodDescriptor      = tokenServiceServiceDescriptor.Methods().ByName("GetAccountToken")
	tokenServiceListAccountTokenMethodDescriptor     = tokenServiceServiceDescriptor.Methods().ByName("ListAccountToken")
)

// TokenServiceClient is a client for the svc.token.v1.TokenService service.
type TokenServiceClient interface {
	GenerateAccountToken(context.Context, *connect.Request[v1.GenerateAccountTokenRequest]) (*connect.Response[v1.GenerateAccountTokenResponse], error)
	RevokeAccountToken(context.Context, *connect.Request[v1.RevokeAccountTokenRequest]) (*connect.Response[v1.RevokeAccountTokenResponse], error)
	GetAccountToken(context.Context, *connect.Request[v1.GetAccountTokenRequest]) (*connect.Response[v1.GetAccountTokenResponse], error)
	ListAccountToken(context.Context, *connect.Request[v1.ListAccountTokenRequest]) (*connect.Response[v1.ListAccountTokenResponse], error)
}

// NewTokenServiceClient constructs a client for the svc.token.v1.TokenService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenServiceClient{
		generateAccountToken: connect.NewClient[v1.GenerateAccountTokenRequest, v1.GenerateAccountTokenResponse](
			httpClient,
			baseURL+TokenServiceGenerateAccountTokenProcedure,
			connect.WithSchema(tokenServiceGenerateAccountTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revokeAccountToken: connect.NewClient[v1.RevokeAccountTokenRequest, v1.RevokeAccountTokenResponse](
			httpClient,
			baseURL+TokenServiceRevokeAccountTokenProcedure,
			connect.WithSchema(tokenServiceRevokeAccountTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccountToken: connect.NewClient[v1.GetAccountTokenRequest, v1.GetAccountTokenResponse](
			httpClient,
			baseURL+TokenServiceGetAccountTokenProcedure,
			connect.WithSchema(tokenServiceGetAccountTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAccountToken: connect.NewClient[v1.ListAccountTokenRequest, v1.ListAccountTokenResponse](
			httpClient,
			baseURL+TokenServiceListAccountTokenProcedure,
			connect.WithSchema(tokenServiceListAccountTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	generateAccountToken *connect.Client[v1.GenerateAccountTokenRequest, v1.GenerateAccountTokenResponse]
	revokeAccountToken   *connect.Client[v1.RevokeAccountTokenRequest, v1.RevokeAccountTokenResponse]
	getAccountToken      *connect.Client[v1.GetAccountTokenRequest, v1.GetAccountTokenResponse]
	listAccountToken     *connect.Client[v1.ListAccountTokenRequest, v1.ListAccountTokenResponse]
}

// GenerateAccountToken calls svc.token.v1.TokenService.GenerateAccountToken.
func (c *tokenServiceClient) GenerateAccountToken(ctx context.Context, req *connect.Request[v1.GenerateAccountTokenRequest]) (*connect.Response[v1.GenerateAccountTokenResponse], error) {
	return c.generateAccountToken.CallUnary(ctx, req)
}

// RevokeAccountToken calls svc.token.v1.TokenService.RevokeAccountToken.
func (c *tokenServiceClient) RevokeAccountToken(ctx context.Context, req *connect.Request[v1.RevokeAccountTokenRequest]) (*connect.Response[v1.RevokeAccountTokenResponse], error) {
	return c.revokeAccountToken.CallUnary(ctx, req)
}

// GetAccountToken calls svc.token.v1.TokenService.GetAccountToken.
func (c *tokenServiceClient) GetAccountToken(ctx context.Context, req *connect.Request[v1.GetAccountTokenRequest]) (*connect.Response[v1.GetAccountTokenResponse], error) {
	return c.getAccountToken.CallUnary(ctx, req)
}

// ListAccountToken calls svc.token.v1.TokenService.ListAccountToken.
func (c *tokenServiceClient) ListAccountToken(ctx context.Context, req *connect.Request[v1.ListAccountTokenRequest]) (*connect.Response[v1.ListAccountTokenResponse], error) {
	return c.listAccountToken.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the svc.token.v1.TokenService service.
type TokenServiceHandler interface {
	GenerateAccountToken(context.Context, *connect.Request[v1.GenerateAccountTokenRequest]) (*connect.Response[v1.GenerateAccountTokenResponse], error)
	RevokeAccountToken(context.Context, *connect.Request[v1.RevokeAccountTokenRequest]) (*connect.Response[v1.RevokeAccountTokenResponse], error)
	GetAccountToken(context.Context, *connect.Request[v1.GetAccountTokenRequest]) (*connect.Response[v1.GetAccountTokenResponse], error)
	ListAccountToken(context.Context, *connect.Request[v1.ListAccountTokenRequest]) (*connect.Response[v1.ListAccountTokenResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenServiceGenerateAccountTokenHandler := connect.NewUnaryHandler(
		TokenServiceGenerateAccountTokenProcedure,
		svc.GenerateAccountToken,
		connect.WithSchema(tokenServiceGenerateAccountTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceRevokeAccountTokenHandler := connect.NewUnaryHandler(
		TokenServiceRevokeAccountTokenProcedure,
		svc.RevokeAccountToken,
		connect.WithSchema(tokenServiceRevokeAccountTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceGetAccountTokenHandler := connect.NewUnaryHandler(
		TokenServiceGetAccountTokenProcedure,
		svc.GetAccountToken,
		connect.WithSchema(tokenServiceGetAccountTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceListAccountTokenHandler := connect.NewUnaryHandler(
		TokenServiceListAccountTokenProcedure,
		svc.ListAccountToken,
		connect.WithSchema(tokenServiceListAccountTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.token.v1.TokenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenServiceGenerateAccountTokenProcedure:
			tokenServiceGenerateAccountTokenHandler.ServeHTTP(w, r)
		case TokenServiceRevokeAccountTokenProcedure:
			tokenServiceRevokeAccountTokenHandler.ServeHTTP(w, r)
		case TokenServiceGetAccountTokenProcedure:
			tokenServiceGetAccountTokenHandler.ServeHTTP(w, r)
		case TokenServiceListAccountTokenProcedure:
			tokenServiceListAccountTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) GenerateAccountToken(context.Context, *connect.Request[v1.GenerateAccountTokenRequest]) (*connect.Response[v1.GenerateAccountTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.token.v1.TokenService.GenerateAccountToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) RevokeAccountToken(context.Context, *connect.Request[v1.RevokeAccountTokenRequest]) (*connect.Response[v1.RevokeAccountTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.token.v1.TokenService.RevokeAccountToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) GetAccountToken(context.Context, *connect.Request[v1.GetAccountTokenRequest]) (*connect.Response[v1.GetAccountTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.token.v1.TokenService.GetAccountToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) ListAccountToken(context.Context, *connect.Request[v1.ListAccountTokenRequest]) (*connect.Response[v1.ListAccountTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.token.v1.TokenService.ListAccountToken is not implemented"))
}
